from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
import picokeypad as keypad
import time
import random
import framebuf

disp1 = I2C(1,sda=Pin(26), scl=Pin(27), freq=1700000)
oled = SSD1306_I2C(128, 64, disp1)

i2c=machine.I2C(0,sda=machine.Pin(4), scl=machine.Pin(5), freq=1700000)
oled2 = SSD1306_I2C(128, 64, i2c)

time.sleep(0.5)

oled.fill(0)

Mole_buffer = bytearray(b'\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf1\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xc1\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x81\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x01\xf0\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x01\xf7\xfc\x03\xe0\x00\x00\x00\x00\x00\x00\x00\x00>\x03\xff\xfe\x0f\xf0\x00\x00\x00\x01\x80\x00\x00\x00\x00\x03\xff\xfe\x1f\xf0\x00\x00\x00\x07\xe0\x00\x00\x00\x00\x07\xff\xfe?\xf0\x00\x00\x00\x0f\xf0\x00\x00\x00\x00\x07\xff>\xff\xf0\x00\x00\x00?\xf0\x00\x00\x00\x00\x07\xfc\x1f\xfe\xf0\x00\x00\x00?\xf0\x00\x00\x00\x00\x0f\xf8\x1f\xfd\xf0\x00\x00\x00\x7f\xf0\x00\x00\x00\x00\x0f\xf0\x1f\xf9\xf0\x00\x00\x00\xff\xf0\x00\x00\x00\x00\x0f\xe0\x1f\xf1\xf0\x00\x00\x00\xfd\xf0\x00\x00\x00\x00\x1f\xe0\x1f\xe3\xf0\x00\x00\x01\xf9\xf0\x00\x00\x00\x00\x1f\xc0?\xc3\xe0\x00\x00\x01\xfb\xe0\x00\x00\x00\x00?\x80?\x87\xe0\x00\x00\x01\xf3\xe0\x7f\x00\x00\x00?\x00\x7f\x87\xc0\x00\x00\x03\xff\xe0\xff\x00\x00\x00\x7f\x00\x7f\x0f\xc0\x00\x0f\x83\xff\xc1\xff\x80\x00\x00~\x00~\x1f\x80\x00\x7f\xc3\xff\xc3\xff\x80\x00\x00\xfe\x00\xfe?\x80\x00\xff\xe3\xff\x87\xff\x80\x00\x00\xfc\x00\xfc?\x00\x01\xff\xff\xfe\x07\xff\x80\x00\x01\xfc\x00\xfc~\x00\x03\xff\xff\xfc\x0f\xdf\x00\x00\x01\xf8\x01\xf8~\x00\x07\xff\xff\xf0\x0f\xdf\x00\x00\x03\xf8\x03\xf8\xfc\x00\x1f\xfb\xff\x80\x0f\xbe\x00\x00\x03\xf0\x03\xf0\xf8\x00?\xe3\xef\x80\x1f\xbe\x00\x00\x07\xf0\x07\xe0\xf8\x00\xff\x83\xef\x80\x1f~\x00\x18\x07\xf0\x0f\xe0\xf0\x01\xff\x03\xef\x80\x1f\xfc\x00|\x0f\xe0\x0f\xe1\xf0\x07\xfe\x07\xcf\x80\x1f\xfc\x03\xfc\x0f\xc0\x1f\xc1\xf0\x0f\xfe\x0f\xcf\x80\x1f\xf8\x07\xfc\x0f\xc0\x1f\xc1\xf0\x1f\xfc\x1f\x8f\xc0\x1f\xf0\x1f\xfc\x1f\x80?\x81\xf0?\xfc?\x87\xc0\x7f\xe0\x7f\xf0\x1f\x80?\x81\xf0\xff\xf8\x7f\x07\xf1\xff\x80\xff\x80?\x00\x7f\x01\xf1\xfe}\xfe\x07\xff\xff\xff\xff\x00?\x00~\x01\xff\xfc\x7f\xfc\x03\xff\xff\xff\xfc\x00~\x00\xfc\x01\xff\xf8\x7f\xf8\x01\xff\xff\xff\xf0\x00|\x00\xfc\x00\xff\xe0?\xf0\x00\x7f\xc7\xff\xe0\x00|\x00\xf8\x00\x7f\xc0\x1f\xe0\x00\x00\x00\xfe\x00\x00\xfc\x00\xf0\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
Mole_image = framebuf.FrameBuffer(Mole_buffer, 110, 48, framebuf.MONO_HLSB)

Whack_buffer = bytearray(b'\x0f\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x7f\x80\x01\xc0\x1c\x00\x00\x00\x00\x008\x00\xff\x80\x03\xc0<\x00\x00\x00\x00\x008\x00\xfb\x80\x03\xc0|\x00\x00\x00\x00\x00x\x00\xe7\x80\x07\xc0x\x00\x00\x00\x00\x00p\x00\x07\x00\x07\x80\xf0\x00\x00\x00\x00\x00\xff\xc0\x0f\x00\x0f\x00\xf0\x00\x00\x00\x07\xc0\xff\xc0\x0e\x00\x1e\x01\xec\x00\x0f\xc0\x1f\xc1\xff\xc0\x1e\x00\x1e\x03\xff\x00?\xc0\x7f\xc3\xf9\xc0\x1c\x1c<\x07\xff\x80\x7f\xc0\xfc\x07\xf7\xc0<<x\x0f\xff\x81\xff\x83\xf8\x07\xff\x80x|\xf8\x0f\xc3\x83\xff\x87\xf0\x1f\xff\x00p\xf9\xf0\x1f\x87\x0f\xef\x0f\xe0?~\x00\xf0\xf3\xf0~\x07\x1f\xdf\x1f\xc0\x7f<>\xe3\xf7\xf0\xfe\x07\x7f\x9f\xbf\x80~?\xfe\xe7\xff\xff\xfc\x07\xff?\xff\xc1\xfc\x1f\xf8\xef\xff\x7f\xf8\x07\xf7\xfb\xf9\xff\xfc\x07\xf0\xff\xfe?\xb8\x07\xe7\xf8\xe1\xff\xc0\x00\x00\xfex\x00\x00\x00\x07\xf0\x00\x7f\x00\x00\x00\xf8\x00\x00\x00\x00\x01\x80\x00\x00\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x9e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00><\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf9\xff>\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\xef\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf7\xc7\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x80\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x00\x00\x00\x00\x00\x00')
Whack_image = framebuf.FrameBuffer(Whack_buffer, 95, 48, framebuf.MONO_HLSB)

welcometext = 0.07
up = 31
down = 32
close = 128

def welcomewithline():
    oled.fill(0)
    oled.text("|", -2, 25)
    oled.show()
    
    time.sleep(welcometext)
    oled.fill(0)
    oled.text("W|", 0, 25)
    oled.show()

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("We|", 0, 25)
    oled.show()

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("Wel|", 0, 25)
    oled.show()

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("Welc|", 0, 25)
    oled.show()

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("Welco|", 0, 25)
    oled.show()

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("Welcom|", 0, 25)
    oled.show()
    

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("Welcome|", 0, 25)
    oled.show()

    time.sleep(welcometext)
    oled.fill(0)
    oled.text("Welcome.|", 0, 25)
    oled.show()
    
    time.sleep(welcometext + 0.07)
    oled.fill(0)
    oled.text("Welcome.", 0, 25)
    oled.show()
    
    time.sleep(welcometext + 0.07)
    oled.fill(0)
    oled.text("Welcome.|", 0, 25)
    oled.show()
    
    time.sleep(welcometext + 0.07)
    oled.fill(0)
    oled.text("Welcome.", 0, 25)
    oled.show()
    
    time.sleep(welcometext + 0.07)
    oled.fill(0)
    oled.text("Welcome.|", 0, 25)
    oled.show()
    
    time.sleep(welcometext + 0.07)
    oled.fill(0)
    oled.text("Welcome.", 0, 25)
    oled.show()

def opengate():
    global close
    global up
    global down
    up = 31
    down = 32
    close = 128
    for i in range(0, 9):
        up = up + 2
        down = down - 2
        oled.fill(0)
        oled.hline(0, up, 128, 1)
        oled.hline(0, down, 128, 1)
        oled.show()
        oled2.fill(0)
        oled2.hline(0, up, 128, 1)
        oled2.hline(0, down, 128, 1)
        oled2.show()
    for i in range(0, 10):
        up = up + 1
        down = down - 1
        oled.fill(0)
        oled.hline(0, up, 128, 1)
        oled.hline(0, down, 128, 1)
        oled.show()
        oled2.fill(0)
        oled2.hline(0, up, 128, 1)
        oled2.hline(0, down, 128, 1)
        oled2.show()
    for i in range(0, 4):
        time.sleep(0.03)
        up = up + 1
        down = down - 1
        oled.fill(0)
        oled.hline(0, up, 128, 1)
        oled.hline(0, down, 128, 1)
        oled.show()
        oled2.fill(0)
        oled2.hline(0, up, 128, 1)
        oled2.hline(0, down, 128, 1)
        oled2.show()
    time.sleep(0.1)
    #starts closing the lines 
    for i in range(0, 48, 4):
        close = close - 8
        oled.fill(0)
        oled.hline(i, 63, close, 1)
        oled.hline(i, 0, close, 1)
        oled.show()
        oled2.fill(0)
        oled2.hline(i, 63, close, 1)
        oled2.hline(i, 0, close, 1)
        oled2.show()
    #slower closing
    for i in range(48, 64, 1):
        close = close - 2
        oled.fill(0)
        oled.hline(i, 63, close, 1)
        oled.hline(i, 0, close, 1)
        oled.show()
        oled2.fill(0)
        oled2.hline(i, 63, close, 1)
        oled2.hline(i, 0, close, 1)
        oled2.show()

def enter_wackamole():
    oled.fill(0)
    oled.text("-= Entering =-", 9, 20)
    oled.text("Whack-A-Mole", 17, 30)
    oled.show()
    time.sleep(5)
    oled.fill(0)
    oled.show()

def fizzle_out_text():
    close = 128
    up = 0
    for i in range(16, 0, -1):
        time.sleep(0.02)
        close = close - 8
        up = up + 8
        oled.fill_rect(close, 0, 128, 64, 0)
        print(close)
        oled.show()

out = 0
last_button_states = 0
while True:
    keypressed = keypad.get_button_states()
    if out == 1:
        break
    if last_button_states != keypressed:
        last_button_states = keypressed
        if keypressed > 0:
            print(keypressed)
            out = 1

opengate()
welcomewithline()
time.sleep(1)
oled2.fill(0)
oled2.blit(Mole_image, 6, 7)
oled2.show()

oled.fill(0)
oled.blit(Whack_image, 17, 9)
oled.show()




