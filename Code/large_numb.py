from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
import time
import picokeypad as keypad
import _thread
import framebuf
import random

#set up the i2c protocal and initialize the displays: get addreses and set SDA/SCL pins etc.
disp1 = I2C(1,sda=Pin(26), scl=Pin(27), freq=1700000)
oled = SSD1306_I2C(128, 64, disp1)

i2c=machine.I2C(0,sda=machine.Pin(4), scl=machine.Pin(5), freq=1700000)
oled2 = SSD1306_I2C(128, 64, i2c)

#start defining byte arrays for the big numbers
zero_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00\x0f\xff\x80\x00\x00\x7f\xff\xf8\x00\x01\xff\xff\xfe\x00\x03\xff\xff\xff\x00\x07\xff\xff\xff\x80\x0f\xff\xff\xff\xc0\x0f\xff\xff\xff\xc0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x1f\xff\x87\xff\xe0\x1f\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0\x1f\xff\x87\xff\xf0\x1f\xff\x87\xff\xe0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x0f\xff\xff\xff\xc0\x07\xff\xff\xff\xc0\x07\xff\xff\xff\x80\x03\xff\xff\xff\x00\x01\xff\xff\xfe\x00\x00\x7f\xff\xf8\x00\x00\x0f\xff\xc0\x00\x00\x00\x00\x00\x00')
zero_number = framebuf.FrameBuffer(zero_buffer, 36, 58, framebuf.MONO_HLSB)
    
one_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xfc\x00\x00\x00\x0f\xfc\x00\x00\x00\x1f\xfc\x00\x00\x00?\xfc\x00\x00\x00\xff\xfc\x00\x00\x01\xff\xfc\x00\x00\x07\xff\xfc\x00\x00\x7f\xff\xfc\x00\x03\xff\xff\xfc\x00\x03\xff\xff\xfc\x00\x03\xff\xff\xfc\x00\x03\xff\xff\xfc\x00\x03\xff\xff\xfc\x00\x03\xff\xff\xfc\x00\x00\x0f\xff\xfc\x00\x00\x03\xff\xfc\x00\x00\x01\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\xff\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
one_number = framebuf.FrameBuffer(one_buffer, 36, 58, framebuf.MONO_HLSB)

two_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00\x0f\xff\xc0\x00\x00\x7f\xff\xf8\x00\x01\xff\xff\xfc\x00\x03\xff\xff\xff\x00\x07\xff\xff\xff\x00\x07\xff\xff\xff\x80\x0f\xff\xff\xff\xc0\x0f\xff\xff\xff\xc0\x1f\xff\xff\xff\xe0\x1f\xff\x87\xff\xe0\x1f\xff\x07\xff\xe0\x1f\xff\x07\xff\xe0?\xff\x07\xff\xf0?\xff\x07\xff\xf0?\xff\x07\xff\xf0?\xff\x07\xff\xe0?\xff\x0f\xff\xe0?\xff\x0f\xff\xe0?\xff\x1f\xff\xe0\x00\x00\x1f\xff\xe0\x00\x00?\xff\xc0\x00\x00?\xff\xc0\x00\x00\x7f\xff\xc0\x00\x00\x7f\xff\x80\x00\x00\xff\xff\x80\x00\x00\xff\xff\x00\x00\x01\xff\xff\x00\x00\x01\xff\xfe\x00\x00\x03\xff\xfe\x00\x00\x07\xff\xfc\x00\x00\x07\xff\xf8\x00\x00\x0f\xff\xf8\x00\x00\x0f\xff\xe0\x00\x00\x1f\xff\xe0\x00\x00\x7f\xff\xc0\x00\x00\x7f\xff\x80\x00\x00\xff\xff\x80\x00\x00\xff\xff\x00\x00\x01\xff\xfe\x00\x00\x03\xff\xfe\x00\x00\x03\xff\xfc\x00\x00\x07\xff\xf8\x00\x00\x07\xff\xf8\x00\x00\x0f\xff\xf0\x00\x00\x1f\xff\xff\xff\xc0\x1f\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
two_number = framebuf.FrameBuffer(two_buffer, 36, 58, framebuf.MONO_HLSB)

three_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xff\x00\x00\x01\xff\xff\xe0\x00\x03\xff\xff\xfc\x00\x07\xff\xff\xfe\x00\x0f\xff\xff\xff\x00\x1f\xff\xff\xff\x80\x1f\xff\xff\xff\x80\x1f\xff\xff\xff\xc0?\xff\x8f\xff\xc0?\xff\x07\xff\xc0?\xff\x07\xff\xc0?\xff\x07\xff\xc0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xc0?\xff\x07\xff\xc0\x00\x00\x07\xff\xc0\x00\x00\x07\xff\xc0\x00\x00\x07\xff\xc0\x00\x00\x0f\xff\x80\x00\x07\xff\xff\x00\x00\x07\xff\xfe\x00\x00\x07\xff\xfc\x00\x00\x07\xff\xfc\x00\x00\x07\xff\xff\x00\x00\x07\xff\xff\x80\x00\x07\xff\xff\xc0\x00\x07\xff\xff\xc0\x00\x00\x1f\xff\xc0\x00\x00\x0f\xff\xe0\x00\x00\x0f\xff\xe0\x00\x00\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0?\xff\x07\xff\xe0\x1f\xff\x07\xff\xe0\x1f\xff\x07\xff\xc0\x1f\xff\x8f\xff\xc0\x1f\xff\xff\xff\xc0\x0f\xff\xff\xff\x80\x0f\xff\xff\xff\x80\x07\xff\xff\xff\x00\x03\xff\xff\xfe\x00\x01\xff\xff\xfc\x00\x00\x1f\xff\xe0\x00\x00\x03\xfe\x00\x00\x00\x00\x00\x00\x00')
three_number = framebuf.FrameBuffer(three_buffer, 36, 58, framebuf.MONO_HLSB)

four_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\x80\x00\x07\xff\xff\x80\x00\x07\xff\xff\x80\x00\x0f\xff\xff\x80\x00\x0f\xff\xff\x80\x00\x0f\xff\xff\x80\x00\x1f\xff\xff\x80\x00\x1f\xff\xff\x80\x00\x1f\xff\xff\x80\x00\x1f\xff\xff\x80\x00\x7f\xff\xff\x80\x00\x7f\xff\xff\x80\x00\xff\xff\xff\x80\x00\xff\xff\xff\x80\x00\xff\xff\xff\x80\x00\xff\xff\xff\x80\x01\xff\xff\xff\x80\x01\xff\xbf\xff\x80\x01\xff\xbf\xff\x80\x03\xff\xbf\xff\x80\x03\xff\xbf\xff\x80\x03\xff?\xff\x80\x07\xff?\xff\x80\x07\xff?\xff\x80\x07\xff?\xff\x80\x0f\xfe?\xff\x80\x0f\xfe?\xff\x80\x0f\xfe?\xff\x80\x1f\xfe?\xff\x80\x1f\xfc?\xff\x80\x1f\xfc?\xff\x80?\xfc?\xff\x80?\xfc?\xff\x80?\xf8?\xff\x80\x7f\xf8?\xff\x80\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x7f\xff\xff\xff\xf8\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
four_number = framebuf.FrameBuffer(four_buffer, 36, 58, framebuf.MONO_HLSB)

five_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xff\xff\xff\x80?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\xff\xff\xc0?\xff\x00\x00\x00?\xff\x00\x00\x00?\xff\x00\x00\x00?\xff\x00\x00\x00?\xff\x03\x80\x00?\xff\x1f\xfc\x00?\xff\x7f\xff\x00?\xff\xff\xff\x80?\xff\xff\xff\xc0?\xff\xff\xff\xe0?\xff\xff\xff\xe0?\xff\xff\xff\xe0?\xff\xff\xff\xf0?\xff\xef\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0\x00\x00\x07\xff\xf0\x00\x00\x07\xff\xf0\x00\x00\x07\xff\xf0\x00\x00\x07\xff\xf0\x00\x00\x07\xff\xf0\x00\x00\x07\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0\x1f\xff\xc7\xff\xf0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x0f\xff\xff\xff\xe0\x0f\xff\xff\xff\xc0\x07\xff\xff\xff\x80\x03\xff\xff\xff\x00\x01\xff\xff\xfe\x00\x00\x7f\xff\xfc\x00\x00\x07\xff\xc0\x00\x00\x00\x00\x00\x00')
five_number = framebuf.FrameBuffer(five_buffer, 36, 58, framebuf.MONO_HLSB)

six_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x0f\xff\xe0\x00\x00\x7f\xff\xfc\x00\x01\xff\xff\xff\x00\x03\xff\xff\xff\x80\x07\xff\xff\xff\xc0\x0f\xff\xff\xff\xc0\x0f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xf0\x1f\xff\xc7\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x80\x00\x00?\xff\x87\xf8\x00?\xff\x9f\xfe\x00?\xff\xff\xff\x80?\xff\xff\xff\xc0?\xff\xff\xff\xe0?\xff\xff\xff\xe0?\xff\xff\xff\xf0?\xff\xff\xff\xf0?\xff\xff\xff\xf0?\xff\xcf\xff\xf0?\xff\xc7\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf0?\xff\x87\xff\xf0\x1f\xff\xc7\xff\xf0\x1f\xff\xff\xff\xf0\x1f\xff\xff\xff\xf0\x0f\xff\xff\xff\xe0\x0f\xff\xff\xff\xc0\x07\xff\xff\xff\xc0\x03\xff\xff\xff\x80\x01\xff\xff\xff\x00\x00\x7f\xff\xfc\x00\x00\x07\xff\xe0\x00\x00\x00\x00\x00\x00')
six_number = framebuf.FrameBuffer(six_buffer, 36, 58, framebuf.MONO_HLSB)

seven_buffer = bytearray(b'\x00\x00\x00\x00\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x1f\xff\xff\xff\x00\x00\x00\x7f\xff\x00\x00\x00\x7f\xff\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfc\x00\x00\x03\xff\xfc\x00\x00\x03\xff\xfc\x00\x00\x03\xff\xfc\x00\x00\x03\xff\xfc\x00\x00\x03\xff\xf8\x00\x00\x07\xff\xf8\x00\x00\x07\xff\xf8\x00\x00\x07\xff\xf8\x00\x00\x07\xff\xf8\x00\x00\x0f\xff\xe0\x00\x00\x0f\xff\xe0\x00\x00\x0f\xff\xe0\x00\x00\x0f\xff\xe0\x00\x00\x0f\xff\xe0\x00\x00\x1f\xff\xc0\x00\x00\x1f\xff\xc0\x00\x00\x1f\xff\xc0\x00\x00\x1f\xff\xc0\x00\x00\x1f\xff\xc0\x00\x00\x7f\xff\xc0\x00\x00\x7f\xff\x80\x00\x00\x7f\xff\x80\x00\x00\x7f\xff\x80\x00\x00\x7f\xff\x80\x00\x00\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x01\xff\xfe\x00\x00\x00\x00\x00\x00\x00')
seven_number = framebuf.FrameBuffer(seven_buffer, 36, 58, framebuf.MONO_HLSB)

eight_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00\x0f\xff\xe0\x00\x00\xff\xff\xfc\x00\x01\xff\xff\xfe\x00\x03\xff\xff\xff\x00\x07\xff\xff\xff\x80\x0f\xff\xff\xff\xc0\x0f\xff\xff\xff\xc0\x1f\xff\xff\xff\xe0\x1f\xff\xcf\xff\xe0\x1f\xff\x87\xff\xe0?\xff\x87\xff\xe0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xe0\x1f\xff\x87\xff\xe0\x1f\xff\x87\xff\xe0\x1f\xff\xcf\xff\xe0\x0f\xff\xff\xff\xc0\x0f\xff\xff\xff\x80\x07\xff\xff\xff\x00\x03\xff\xff\xfe\x00\x03\xff\xff\xff\x00\x07\xff\xff\xff\x80\x0f\xff\xff\xff\xc0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0?\xff\xcf\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x0f\xff\xff\xff\xc0\x07\xff\xff\xff\x80\x03\xff\xff\xff\x00\x01\xff\xff\xfe\x00\x00\x7f\xff\xfc\x00\x00\x0f\xff\xc0\x00\x00\x00\x00\x00\x00')
eight_number = framebuf.FrameBuffer(eight_buffer, 36, 58, framebuf.MONO_HLSB)

nine_buffer = bytearray(b'\x00\x00\x00\x00\x00\x00\x00x\x00\x00\x00\x1f\xff\xe0\x00\x00\xff\xff\xfc\x00\x01\xff\xff\xff\x00\x03\xff\xff\xff\x80\x07\xff\xff\xff\xc0\x0f\xff\xff\xff\xc0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xe0\x1f\xff\xff\xff\xf0?\xff\xc7\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\xc7\xff\xf8?\xff\xef\xff\xf8?\xff\xff\xff\xf8\x1f\xff\xff\xff\xf8\x1f\xff\xff\xff\xf8\x1f\xff\xff\xff\xf8\x0f\xff\xff\xff\xf8\x07\xff\xff\xff\xf8\x03\xff\xff\xff\xf8\x00\xff\xf7\xff\xf8\x00\x1f\x87\xff\xf8\x00\x00\x07\xff\xf8\x00\x00\x07\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf8?\xff\x87\xff\xf0?\xff\x87\xff\xf0?\xff\x87\xff\xf0\x1f\xff\xc7\xff\xf0\x1f\xff\xff\xff\xf0\x1f\xff\xff\xff\xe0\x0f\xff\xff\xff\xe0\x0f\xff\xff\xff\xc0\x07\xff\xff\xff\x80\x03\xff\xff\xff\x00\x01\xff\xff\xfe\x00\x00\x7f\xff\xfc\x00\x00\x0f\xff\xc0\x00\x00\x00\x00\x00\x00')
nine_number = framebuf.FrameBuffer(nine_buffer, 36, 58, framebuf.MONO_HLSB)


def disp_big_numb(the_number): #depending on the variable that goes in it will display the correct number automatically
    oled.fill(0)
    oled2.fill(0)
    if len(str(the_number)) == 1:
        if the_number == 0:
            oled2.blit(zero_number, 0, 0)
        elif the_number == 1:
            oled2.blit(one_number, 0, 0)
        elif the_number == 2:
            oled2.blit(two_number, 0, 0)
        elif the_number == 3:
            oled2.blit(three_number, 0, 0)
        elif the_number == 4:
            oled2.blit(four_number, 0, 0)
        elif the_number == 5:
            oled2.blit(five_number, 0, 0)
        elif the_number == 6:
            oled2.blit(six_number, 0, 0)
        elif the_number == 7:
            oled2.blit(seven_number, 0, 0)
        elif the_number == 8:
            oled2.blit(eight_number, 0, 0)
        elif the_number == 9:
            oled2.blit(nine_number, 0, 0)
        
        oled2.show()
            
    elif len(str(the_number)) == 2:
        number_string = str(the_number) # change to a string so we can seperate the digits
        if number_string[0] == "1": #getting the correct number for the tenths place
            oled.blit(one_number, 91, 0)
        elif number_string[0] == "2":
            oled.blit(two_number, 91, 0)
        elif number_string[0] == "3":
            oled.blit(three_number, 91, 0)
        elif number_string[0] == "4":
            oled.blit(four_number, 91, 0)
        elif number_string[0] == "5":
            oled.blit(five_number, 91, 0)
        elif number_string[0] == "6":
            oled.blit(six_number, 91, 0)
        elif number_string[0] == "7":
            oled.blit(seven_number, 91, 0)
        elif number_string[0] == "8":
            oled.blit(eight_number, 91, 0)
        elif number_string[0] == "9":
            oled.blit(nine_number, 91, 0)
        
        
        if number_string[1] == "0": # getting the correct number for the ones place
            oled2.blit(zero_number, 0, 0)
        elif number_string[1] == "1":
            oled2.blit(one_number, 0, 0)
        elif number_string[1] == "2":
            oled2.blit(two_number, 0, 0)
        elif number_string[1] == "3":
            oled2.blit(three_number, 0, 0)
        elif number_string[1] == "4":
            oled2.blit(four_number, 0, 0)
        elif number_string[1] == "5":
            oled2.blit(five_number, 0, 0)
        elif number_string[1] == "6":
            oled2.blit(six_number, 0, 0)
        elif number_string[1] == "7":
            oled2.blit(seven_number, 0, 0)
        elif number_string[1] == "8":
            oled2.blit(eight_number, 0, 0)
        elif number_string[1] == "9":
            oled2.blit(nine_number, 0, 0)
            
        oled.show()
        oled2.show()
        
    elif len(str(the_number)) == 3:
        number_string = str(the_number) # change to a string so we can seperate the digits
        if number_string[0] == "1": #getting the correct number for the tenths place
            oled.blit(one_number, 91, 0)
        elif number_string[0] == "2":
            oled.blit(two_number, 91, 0)
        elif number_string[0] == "3":
            oled.blit(three_number, 91, 0)
        elif number_string[0] == "4":
            oled.blit(four_number, 91, 0)
        elif number_string[0] == "5":
            oled.blit(five_number, 91, 0)
        elif number_string[0] == "6":
            oled.blit(six_number, 91, 0)
        elif number_string[0] == "7":
            oled.blit(seven_number, 91, 0)
        elif number_string[0] == "8":
            oled.blit(eight_number, 91, 0)
        elif number_string[0] == "9":
            oled.blit(nine_number, 91, 0)
        
        if number_string[1] == "0": # getting the correct number for the ones place
            oled2.blit(zero_number, 0, 0)
        elif number_string[1] == "1":
            oled2.blit(one_number, 0, 0)
        elif number_string[1] == "2":
            oled2.blit(two_number, 0, 0)
        elif number_string[1] == "3":
            oled2.blit(three_number, 0, 0)
        elif number_string[1] == "4":
            oled2.blit(four_number, 0, 0)
        elif number_string[1] == "5":
            oled2.blit(five_number, 0, 0)
        elif number_string[1] == "6":
            oled2.blit(six_number, 0, 0)
        elif number_string[1] == "7":
            oled2.blit(seven_number, 0, 0)
        elif number_string[1] == "8":
            oled2.blit(eight_number, 0, 0)
        elif number_string[1] == "9":
            oled2.blit(nine_number, 0, 0)
        
        if number_string[2] == "0": # getting the correct number for the ones place
            oled2.blit(zero_number, 42, 0)
        elif number_string[2] == "1":
            oled2.blit(one_number, 42, 0)
        elif number_string[2] == "2":
            oled2.blit(two_number, 42, 0)
        elif number_string[2] == "3":
            oled2.blit(three_number, 42, 0)
        elif number_string[2] == "4":
            oled2.blit(four_number, 42, 0)
        elif number_string[2] == "5":
            oled2.blit(five_number, 42, 0)
        elif number_string[2] == "6":
            oled2.blit(six_number, 42, 0)
        elif number_string[2] == "7":
            oled2.blit(seven_number, 42, 0)
        elif number_string[2] == "8":
            oled2.blit(eight_number, 42, 0)
        elif number_string[2] == "9":
            oled2.blit(nine_number, 42, 0)
        
        oled.show()
        oled2.show()
        
while True:
    for i in range(1, 1000):
        disp_big_numb(i)
        time.sleep(0)

